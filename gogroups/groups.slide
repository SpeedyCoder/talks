
Managing Groups of Goroutines
18 Sep 2019
Tags: concurrency, waitgroup, errgroup

Michal Bock
Go developer, Utility Warehouse
michal.bock@gmail.com

http://michalbock.com/goroutines

https://careers.utilitywarehouse.co.uk

* Let's Start Some Goroutines!
.play -edit simple.go

: We can just start them and they will do what they are supposed to do, right?

* . . . . . . . . . . . . What Do I Do Now?

* Meet the Wait Group
- part of the built in `sync` package - essentially just a thread safe counter
- *Add* increases the value of the counter by specified amount
- *Done* decreases the value of the counter by 1
- *Wait* blocks until the value of the counter is 0
.play -edit waitgroup.go /^func main/,/\n}/

: This is not correct as i is updated in place.

* Wait Group Example - Fixed
- take a single integer argument in the function we are calling
- the arguments to any function called with *go* are evaluated in the calling goroutine
- the body is then evaluated in a new goroutine
.play -edit waitgroup_correct.go /^func main/,/\n}/

* What about Errors?
- so far our job functions had the following signature
.code jobs.go /^type ExampleJob/,/\)/
- in real life where things are not perfect the signature will more likely look like this
.code jobs.go /^type RealJob/,/error/

* Job That Can Fail
.code errchan.go /^func Job/,/return nil\n}/

* Use Error Channel to Collect Errors
.play errchan.go /^func main/,/}\n}/

* Handling Termination
- the standard way to signal to functions that a result is no longer needed or that the program is terminating by cancelling a context
- the context is usually passed as a first argument of the function
.code withctx.go /^type Context/,/\n}\n/

* Simple Wrapper for Handling OS Signals
.code withctx.go /^func NewCtx/,/return ctx\n}/

* Job with Context
.code withctx.go /^func JobWithCtx/,/return nil\n}/

* Using Error Channel and Context
.play withctx.go /^func main/,/}\n}/

: Show example with cancellation outside of the presentation.
: This is a lot of slightly awkward code to write every time.

* Is There a Simpler Way to Do This?
.image https://cdn.shopify.com/s/files/1/1061/1924/products/2_large.png?v=1544200552 _ 350

* Meet the Error Group
- part of the experimental `golang.org/x/sync/errgroup` package
- exposes `Go` and `Wait` functions
.play errgroup/main.go /^func main/,/}\n}/
- only returns the first error it encounters

: Another way to deal with the initial problem of referencing a shared variable.

* What if I Still Need All the Errors?
- we want a different version of the error group that can be used like this
.code errsgroup/example/main.go /^func main/,/}\n}/

* Let's Look at Some Code!

* Ready to Use Alternatives to Error Group?
- Some we found useful are available in `github.com/uw-labs/sync` package.

*rungroup*

- cancels the underlying context as soon as the first function started with a call to `Go` terminates
- useful when managing a continuously running pipeline

*gogroup*

- behaves like `rungroup` but `Wait` only blocks until the underlying context is cancelled (this happens when first function terminates)
- useful in bidirectional gRPC streaming
